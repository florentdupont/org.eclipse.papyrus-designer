// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define ProducerConsumer_components_Producer_Producer_impl_BODY

/************************************************************
 Producer_impl class body
 ************************************************************/

// include associated header file
#include "ProducerConsumer/components/Producer/Producer_impl.h"

// Derived includes directives
#include "ProducerConsumer/components/interfaces/PubData.h"
#include "ProducerConsumer/derivedTypes/ProducerConsumer/components/interfaces/Push_PubData.h"
#include "sysinterfaces/IStart.h"

// Include from Include declaration (body)
#include <unistd.h>
#include <iostream>
using namespace std;
// End of Include declaration (body)

namespace ProducerConsumer {
namespace components {
namespace Producer {

// static attributes (if any)

/**
 * 
 */
void Producer_impl::run() {
	cout << "publish a value via port q;" << endl;
	components::interfaces::PubData data;
	data.x = 2;
	data.y = 3;
	for (int i = 0; i < 20; i++) {
		q->push(data);
		cout << "." << flush;
		// wait 200ms
		usleep(200 * 1000);
	}
}

/**
 * 
 * @return ret 
 */
::sysinterfaces::IStart* Producer_impl::get_start() {
	return this;
}

/**
 * 
 * @param ref 
 */
void Producer_impl::connect_q(
		::ProducerConsumer::derivedTypes::ProducerConsumer::components::interfaces::Push_PubData* /*in*/ref) {
	q = ref;
}

} // of namespace Producer
} // of namespace components
} // of namespace ProducerConsumer

/************************************************************
 End of Producer_impl class body
 ************************************************************/
