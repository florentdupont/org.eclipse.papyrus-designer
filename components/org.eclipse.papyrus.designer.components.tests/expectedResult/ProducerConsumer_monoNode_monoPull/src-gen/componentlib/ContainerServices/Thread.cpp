// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define componentlib_ContainerServices_Thread_BODY

/************************************************************
 Thread class body
 ************************************************************/

// include associated header file
#include "componentlib/ContainerServices/Thread.h"

// Derived includes directives
#include "sysinterfaces/ILifeCycle.h"
#include "sysinterfaces/IRunnable.h"

// Include from Include declaration (body)
#include <pthread.h>
// End of Include declaration (body)

namespace componentlib {
namespace ContainerServices {

// static attributes (if any)

/**
 * 
 * @param arg 
 * @return ret 
 */
void* Thread::staticAct(void* /*in*/arg) {
	((Thread*) arg)->rRun->run();
	return NULL;
}

/**
 * 
 */
void Thread::activate() {
	// create thread
	pthread_t pt;
	pthread_create(&pt, NULL, staticAct, (void *) this);

	// set priority of thread
	struct sched_param schedParam;
	schedParam.sched_priority = priority;
	pthread_setschedparam(pt, SCHED_RR, &schedParam);
	// TODO: check return code (in particular, SCHED_RR only works for root)
}

/**
 * 
 */
void Thread::configuration_complete() {
}

/**
 * 
 */
void Thread::deactivate() {
}

/**
 * 
 * @return ret 
 */
::sysinterfaces::ILifeCycle* Thread::get_lc() {
	return this;
}

/**
 * 
 * @param ref 
 */
void Thread::connect_rRun(::sysinterfaces::IRunnable* /*in*/ref) {
	rRun = ref;
}

} // of namespace ContainerServices
} // of namespace componentlib

/************************************************************
 End of Thread class body
 ************************************************************/
